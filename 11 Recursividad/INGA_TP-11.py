"""1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario
"""
def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

# Programa principal
num = int(input("Ingres√° un n√∫mero: "))
for i in range(1, num + 1):
    print(f"{i}! = {factorial(i)}")

#---------------------------
"""2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique."""

def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)

# Programa principal
pos = int(input("Ingres√° hasta qu√© posici√≥n de Fibonacci quer√©s mostrar: "))
for i in range(pos + 1):
    print(f"Fibonacci({i}) = {fibonacci(i)}")
#---------------------------

"""3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõ
ùëö = ùëõ ‚àó ùëõ
(ùëö‚àí1)
. Prueba esta funci√≥n en un
algoritmo general.
"""
def potencia(base, exponente):
    if exponente == 0:
        return 1
    return base * potencia(base, exponente - 1)

# Programa principal
b = int(input("Base: "))
e = int(input("Exponente: "))
print(f"{b}^{e} = {potencia(b, e)}")


#---------------------------
"""4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto.
"""

def decimal_a_binario(n):
    if n == 0:
        return ""
    return decimal_a_binario(n // 2) + str(n % 2)

# Programa principal
decimal = int(input("N√∫mero decimal a convertir: "))
binario = decimal_a_binario(decimal)
print(f"El n√∫mero binario es: {binario if binario else '0'}")

#---------------------------
"""5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
lo es.
 Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed()."""

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])

# Programa principal
texto = input("Ingres√° una palabra: ").lower()
print("Es pal√≠ndromo" if es_palindromo(texto) else "No es pal√≠ndromo")

#---------------------------
"""6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
 Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5)"""
def suma_digitos(n):
    if n < 10:
        return n
    return n % 10 + suma_digitos(n // 10)

# Programa principal
n = int(input("N√∫mero entero positivo: "))
print("Suma de d√≠gitos:", suma_digitos(n))

#---------------------------
"""7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
√∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.
 Ejemplos:
contar_bloques(1) ‚Üí 1 (1)
contar_bloques(2) ‚Üí 3 (2 + 1)
contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)
"""
def contar_bloques(n):
    if n == 1:
        return 1
    return n + contar_bloques(n - 1)

# Programa principal
niveles = int(input("Bloques en el nivel m√°s bajo: "))
print("Bloques totales necesarios:", contar_bloques(niveles))

#--------------------------- 

"""8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
aparece ese d√≠gito dentro del n√∫mero.
 Ejemplos:
contar_digito(12233421, 2) ‚Üí 3
contar_digito(5555, 5) ‚Üí 4 
contar_digito(123456, 7) ‚Üí 0"""
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    return (1 if numero % 10 == digito else 0) + contar_digito(numero // 10, digito)

# Programa principal
numero = int(input("N√∫mero: "))
digito = int(input("D√≠gito a contar (0-9): "))
print(f"Aparece {contar_digito(numero, digito)} veces")

